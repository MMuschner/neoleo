class LeoWeb:
   def __init__(self, lang, term):
       self.lang = lang
       self.term = term

   def __iter__(self):
       for item in [("a", "trans-a"), ("b", "trans-b"), ("c", "trans-c")]:
          yield item

   def __repr__(self):
       return f"LeoWeb({self.lang!r}, {self.term!r})"

   def translation(self):
       max_width = 15
       result = []
       for t1, t2 in iter(self):
           result.append("{left:<{width}} | {right}".format(left=t1,
                       width=max_width, right=t2))
       return "\n".join(result)


# -----
# Usecase 1: return result as strings
doc = LeoWeb("en", "garden")
print(doc.translation())


# -----
# Usecase 2: iteration
doc = LeoWeb("en", "garden")
for origin, translation in doc:
    print(">", origin, translation)

# -----
# Private method
# Example: prefix with underscore
# def foo(self, ...) -> def _foo(self, ...)
